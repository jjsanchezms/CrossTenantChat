@page "/calling-improved"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject ILogger<Calling> Logger
@attribute [Authorize]
@rendermode InteractiveServer

<HeadContent>
    <!-- ACS UI Library styles for Call Composite -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/%40azure/communication-react%401.29.0/dist/acs-ui.min.css" />
</HeadContent>

<div class="container py-4">
    <h2 class="mb-3">üìû ACS Calling (UI Library - Improved)</h2>
    <p class="text-muted">This page uses the Azure Communication Services UI Library Call Composite with improved library loading.</p>

    <div class="alert alert-info" role="alert">
        <h6>‚ÑπÔ∏è Library Loading Test</h6>
        <p class="mb-2">This page demonstrates improved error handling for the Azure Communication Services UI Library.</p>
        <p class="mb-0">Click "Check Libraries" to see detailed information about library availability.</p>
    </div>

    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="alert @(_statusMessage.Contains("‚úÖ") ? "alert-success" : _statusMessage.Contains("‚ùå") ? "alert-danger" : "alert-info")" role="alert">
            @_statusMessage
        </div>
    }

    <div class="d-flex align-items-end gap-2 mb-3">
        <div>
            <label for="groupId" class="form-label">Group ID (GUID)</label>
            <input id="groupId" class="form-control" @bind="GroupId" />
        </div>
        <div>
            <label for="displayName" class="form-label">Display name</label>
            <input id="displayName" class="form-control" @bind="DisplayName" />
        </div>
        <div class="pb-1">
            <button class="btn btn-secondary me-2" @onclick="CheckLibraries" disabled="@_checking">
                @(_checking ? "Checking..." : "Check Libraries")
            </button>
            <button class="btn btn-primary me-2" @onclick="JoinCall" disabled="@(_joining || !_librariesReady)">
                @(_joining ? "Joining..." : "Join demo call")
            </button>
            <button class="btn btn-outline-secondary" @onclick="LeaveCall">Leave</button>
        </div>
    </div>

    <div id="acs-call-composite-improved" class="border rounded" style="min-height:520px;">
        @if (!_librariesReady)
        {
            <div class="d-flex align-items-center justify-content-center h-100">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading Azure Communication Services libraries...</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private IJSObjectReference? _module;
    private bool _joining;
    private bool _checking;
    private bool _librariesReady;
    private string? _statusMessage;

    public string GroupId { get; set; } = "11111111-1111-1111-1111-111111111111";
    public string DisplayName { get; set; } = "ACS User";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation("Loading improved ACS Calling UI module...");
                _statusMessage = "üîÑ Loading ACS libraries...";
                StateHasChanged();
                
                _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/acs-calling-ui-improved.js");
                Logger.LogInformation("ACS Calling UI module loaded successfully");
                
                // Check if libraries are ready
                await CheckLibraries();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to load ACS Calling UI module");
                _statusMessage = $"‚ùå Failed to load module: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task CheckLibraries()
    {
        if (_module == null) return;
        
        try
        {
            _checking = true;
            _statusMessage = "üîç Checking library availability...";
            StateHasChanged();
            
            // Use JsonElement to properly handle the JavaScript response
            var result = await _module.InvokeAsync<System.Text.Json.JsonElement>("acsCallingUI.checkLibraries");
            
            Logger.LogInformation("Raw JSON result: {JsonResult}", result.ToString());
            
            // Safely extract properties with fallback values
            var success = result.TryGetProperty("success", out var successProp) ? successProp.GetBoolean() : false;
            var message = result.TryGetProperty("message", out var messageProp) ? 
                          (messageProp.ValueKind == System.Text.Json.JsonValueKind.String ? messageProp.GetString() ?? "Empty message" : "Invalid message format") : 
                          "Message property missing";
            
            Logger.LogInformation("Parsed result - Success: {Success}, Message: {Message}", success, message);
            
            if (success)
            {
                _librariesReady = true;
                _statusMessage = "‚úÖ All libraries loaded successfully - Ready to join calls!";
                Logger.LogInformation("Libraries check passed");
            }
            else
            {
                _librariesReady = false;
                _statusMessage = $"‚ùå Libraries not ready: {message}";
                Logger.LogError("Libraries check failed: {Message}", message);
            }
        }
        catch (Exception ex)
        {
            _librariesReady = false;
            _statusMessage = $"‚ùå Error checking libraries: {ex.Message}";
            Logger.LogError(ex, "Failed to check libraries");
        }
        finally
        {
            _checking = false;
            StateHasChanged();
        }
    }

    private async Task JoinCall()
    {
        if (_module == null || !_librariesReady) 
        {
            Logger.LogError("Module not loaded or libraries not ready");
            return;
        }
        
        try
        {
            _joining = true;
            _statusMessage = $"üöÄ Joining call with Group ID: {GroupId}...";
            StateHasChanged();
            
            Logger.LogInformation("Starting Call Composite with GroupId: {GroupId}, DisplayName: {DisplayName}", GroupId, DisplayName);
            
            await _module.InvokeVoidAsync("acsCallingUI.start", new object[] { "acs-call-composite-improved", "/api/calling/token", GroupId, DisplayName });
            
            Logger.LogInformation("Call Composite started successfully");
            _statusMessage = "‚úÖ Successfully joined the call!";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to start Call Composite");
            _statusMessage = $"‚ùå Failed to join call: {ex.Message}";
        }
        finally
        {
            _joining = false;
            StateHasChanged();
        }
    }

    private async Task LeaveCall()
    {
        if (_module == null) return;
        
        try
        {
            _statusMessage = "üëã Leaving call...";
            StateHasChanged();
            
            await _module.InvokeVoidAsync("acsCallingUI.dispose");
            
            Logger.LogInformation("Left call successfully");
            _statusMessage = "üëã Left the call successfully";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to leave call");
            _statusMessage = $"‚ö†Ô∏è Error leaving call: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }
}
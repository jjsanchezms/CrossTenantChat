@using CrossTenantChat.Models
@using CrossTenantChat.Services
@inject IConfiguration Configuration
@inject IAzureCommunicationService AcsService
@inject ILogger<AcsDebugPanel> Logger

@if (Inline)
{
    @if (FooterStyle)
    {
        <div class="acs-debug-footer">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <button class="btn btn-link p-0 text-decoration-none" @onclick="Toggle" aria-expanded="@(!_collapsed)" aria-controls="acs-debug-body-inline">
                    <span class="me-1">@(_collapsed ? "‚ñ∫" : "‚ñº")</span>
                    <span class="fw-semibold">üß≠ ACS Debug Info</span>
                </button>
                <span class="badge bg-@(IsLive ? "primary" : "secondary")">@(IsLive ? "Live" : "Demo")</span>
            </div>
            @if (!_collapsed)
            {
                <div id="acs-debug-body-inline" class="small">
                    <div class="mb-2">
                        <div class="text-muted">Service Mode</div>
                        <div class="fw-semibold">@ServiceTypeName</div>
                    </div>
                    <div class="mb-2">
                        <div class="text-muted">Environment</div>
                        <div class="fw-semibold">@EnvironmentName</div>
                    </div>
                    <hr />
                    <div class="mb-2">
                        <div class="text-muted">ACS Endpoint</div>
                        <div class="text-break">@AcsEndpoint</div>
                    </div>
                    <div class="mb-2">
                        <div class="text-muted">ACS Resource Id</div>
                        <div class="text-break">@AcsResourceId</div>
                    </div>
                    <hr />
                    <div class="mb-2">
                        <div class="text-muted">User Tenant</div>
                        <div>
                            <span class="fw-semibold">@User?.TenantName</span>
                            @if (!string.IsNullOrEmpty(User?.TenantId))
                            {
                                <span class="text-muted ms-1">(@User?.TenantId)</span>
                            }
                        </div>
                    </div>
                    <div class="mb-2">
                        <div class="text-muted">User</div>
                        <div class="text-break">@User?.Name (@User?.Email)</div>
                    </div>
                    <div class="mb-2">
                        <div class="text-muted">ACS User Id</div>
                        <div class="text-break">@DisplayAcsUserId</div>
                    </div>
                    <div class="mb-2">
                        <div class="text-muted">Token</div>
                        <div>
                            <span class="@(HasToken ? "text-success" : "text-danger")">@(HasToken ? "Available" : "Missing")</span>
                            @if (User is not null && User.TokenExpiry != default)
                            {
                                <span class="text-muted ms-2">exp @User.TokenExpiry.ToString("HH:mm:ss") UTC</span>
                            }
                        </div>
                    </div>
                    @if (Thread != null)
                    {
                        <hr />
                        <div class="mb-2">
                            <div class="text-muted">Current Thread</div>
                            <div class="fw-semibold">@Thread!.Topic</div>
                            <div class="text-muted">@Thread!.Id</div>
                        </div>
                        <div class="mb-2">
                            <div class="text-muted">Cross-tenant</div>
                            <div>@(Thread!.IsCrossTenant ? "Yes üåê" : "No")</div>
                        </div>
                        <div class="mb-1">
                            <div class="text-muted">Participants</div>
                            <div>
                                @foreach (var p in Thread!.Participants)
                                {
                                    <div class="text-wrap">‚Ä¢ @p.Name (@p.TenantName)</div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div class="mt-3 border-top pt-2">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <button class="btn btn-link p-0 text-decoration-none" @onclick="Toggle" aria-expanded="@(!_collapsed)" aria-controls="acs-debug-body-inline">
                <span class="me-1">@(_collapsed ? "‚ñ∫" : "‚ñº")</span>
                <span class="fw-semibold">üß≠ ACS Debug Info</span>
            </button>
            <span class="badge bg-@(IsLive ? "primary" : "secondary")">@(IsLive ? "Live" : "Demo")</span>
        </div>
        @if (!_collapsed)
        {
            <div id="acs-debug-body-inline" class="small">
                <div class="mb-2">
                    <div class="text-muted">Service Mode</div>
                    <div class="fw-semibold">@ServiceTypeName</div>
                </div>
                <div class="mb-2">
                    <div class="text-muted">Environment</div>
                    <div class="fw-semibold">@EnvironmentName</div>
                </div>
                <hr />
                <div class="mb-2">
                    <div class="text-muted">ACS Endpoint</div>
                    <div class="text-break">@AcsEndpoint</div>
                </div>
                <div class="mb-2">
                    <div class="text-muted">ACS Resource Id</div>
                    <div class="text-break">@AcsResourceId</div>
                </div>
                <hr />
                <div class="mb-2">
                    <div class="text-muted">User Tenant</div>
                    <div>
                        <span class="fw-semibold">@User?.TenantName</span>
                        @if (!string.IsNullOrEmpty(User?.TenantId))
                        {
                            <span class="text-muted ms-1">(@User?.TenantId)</span>
                        }
                    </div>
                </div>
                <div class="mb-2">
                    <div class="text-muted">User</div>
                    <div class="text-break">@User?.Name (@User?.Email)</div>
                </div>
                <div class="mb-2">
                    <div class="text-muted">ACS User Id</div>
                    <div class="text-break">@DisplayAcsUserId</div>
                </div>
                <div class="mb-2">
                    <div class="text-muted">Token</div>
                    <div>
                        <span class="@(HasToken ? "text-success" : "text-danger")">@(HasToken ? "Available" : "Missing")</span>
                        @if (User is not null && User.TokenExpiry != default)
                        {
                            <span class="text-muted ms-2">exp @User.TokenExpiry.ToString("HH:mm:ss") UTC</span>
                        }
                    </div>
                </div>
                @if (Thread != null)
                {
                    <hr />
                    <div class="mb-2">
                        <div class="text-muted">Current Thread</div>
                        <div class="fw-semibold">@Thread!.Topic</div>
                        <div class="text-muted">@Thread!.Id</div>
                    </div>
                    <div class="mb-2">
                        <div class="text-muted">Cross-tenant</div>
                        <div>@(Thread!.IsCrossTenant ? "Yes üåê" : "No")</div>
                    </div>
                    <div class="mb-1">
                        <div class="text-muted">Participants</div>
                        <div>
                            @foreach (var p in Thread!.Participants)
                            {
                                <div class="text-wrap">‚Ä¢ @p.Name (@p.TenantName)</div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
    }
}
else
{
<div class="card mt-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <button class="btn btn-link p-0 text-decoration-none" @onclick="Toggle" aria-expanded="@(!_collapsed)" aria-controls="acs-debug-body">
            <span class="me-1">@(_collapsed ? "‚ñ∫" : "‚ñº")</span>
            <span class="fw-semibold">üß≠ ACS Debug Info</span>
        </button>
        <span class="badge bg-@(IsLive ? "primary" : "secondary")">@(IsLive ? "Live" : "Demo")</span>
    </div>
    @if (!_collapsed)
    {
    <div id="acs-debug-body" class="card-body small">
        <div class="mb-2">
            <div class="text-muted">Service Mode</div>
            <div class="fw-semibold">@ServiceTypeName</div>
        </div>
        <div class="mb-2">
            <div class="text-muted">Environment</div>
            <div class="fw-semibold">@EnvironmentName</div>
        </div>
        <hr />
        <div class="mb-2">
            <div class="text-muted">ACS Endpoint</div>
            <div class="text-break">@AcsEndpoint</div>
        </div>
        <div class="mb-2">
            <div class="text-muted">ACS Resource Id</div>
            <div class="text-break">@AcsResourceId</div>
        </div>
        <hr />
        <div class="mb-2">
            <div class="text-muted">User Tenant</div>
            <div>
                <span class="fw-semibold">@User?.TenantName</span>
                @if (!string.IsNullOrEmpty(User?.TenantId))
                {
                    <span class="text-muted ms-1">(@User?.TenantId)</span>
                }
             </div>
        </div>
        <div class="mb-2">
            <div class="text-muted">User</div>
            <div class="text-break">@User?.Name (@User?.Email)</div>
        </div>
        <div class="mb-2">
            <div class="text-muted">ACS User Id</div>
            <div class="text-break">@DisplayAcsUserId</div>
        </div>
    <div class="mb-2">
            <div class="text-muted">Token</div>
            <div>
                <span class="@(HasToken ? "text-success" : "text-danger")">@(HasToken ? "Available" : "Missing")</span>
        @if (User is not null && User.TokenExpiry != default)
                {
            <span class="text-muted ms-2">exp @User.TokenExpiry.ToString("HH:mm:ss") UTC</span>
                }
            </div>
        </div>
    @if (Thread != null)
        {
            <hr />
            <div class="mb-2">
                <div class="text-muted">Current Thread</div>
        <div class="fw-semibold">@Thread!.Topic</div>
        <div class="text-muted">@Thread!.Id</div>
            </div>
            <div class="mb-2">
                <div class="text-muted">Cross-tenant</div>
        <div>@(Thread!.IsCrossTenant ? "Yes üåê" : "No")</div>
            </div>
            <div class="mb-1">
                <div class="text-muted">Participants</div>
                <div>
            @foreach (var p in Thread!.Participants)
                    {
                        <div class="text-wrap">‚Ä¢ @p.Name (@p.TenantName)</div>
                    }
                </div>
            </div>
        }
    </div>
    }
</div>

}

@code {
    [Parameter] public ChatUser? User { get; set; }
    [Parameter] public ChatThread? Thread { get; set; }
    [Parameter] public bool InitiallyCollapsed { get; set; } = true;
    [Parameter] public bool Inline { get; set; } = false;
    [Parameter] public bool FooterStyle { get; set; } = false;

    private bool _collapsed;

    private string EnvironmentName => System.Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Unknown";
    private string ServiceTypeName => AcsService?.GetType().Name ?? "(unknown)";
    private bool IsLive => ServiceTypeName.Contains("Live", StringComparison.OrdinalIgnoreCase);
    private string AcsEndpoint => Configuration?["Azure:AzureCommunicationServices:EndpointUrl"] ?? ParseEndpointFromConnectionString() ?? "(not configured)";
    private string AcsResourceId => Configuration?["Azure:AzureCommunicationServices:ResourceId"] ?? "(not configured)";
    private bool HasToken => !string.IsNullOrWhiteSpace(User?.AcsAccessToken);
    private string DisplayAcsUserId => string.IsNullOrWhiteSpace(User?.AcsUserId) ? "(none)" : (User?.AcsUserId ?? "(none)");

    private string? ParseEndpointFromConnectionString()
    {
    var cs = Configuration?["Azure:AzureCommunicationServices:ConnectionString"];
        if (string.IsNullOrWhiteSpace(cs)) return null;
        // Basic parse: endpoint=...;accesskey=...
        var parts = cs.Split(';', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        var endpointPart = parts.FirstOrDefault(p => p.StartsWith("endpoint=", StringComparison.OrdinalIgnoreCase));
        return endpointPart?.Substring("endpoint=".Length);
    }

    protected override void OnInitialized()
    {
        _collapsed = InitiallyCollapsed;
    }

    private void Toggle()
    {
        _collapsed = !_collapsed;
    }
}

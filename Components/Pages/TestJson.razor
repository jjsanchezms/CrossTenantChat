@page "/test-json"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject ILogger<TestJsonPage> Logger

<div class="container py-4">
    <h2 class="mb-3">üß™ JSON Element Test</h2>
    <p class="text-muted">This page tests the JsonElement handling for JavaScript interop.</p>

    @if (!string.IsNullOrEmpty(_statusMessage))
    {
        <div class="alert @(_statusMessage.Contains("‚úÖ") ? "alert-success" : _statusMessage.Contains("‚ùå") ? "alert-danger" : "alert-info")" role="alert">
            @_statusMessage
        </div>
    }

    <div class="d-flex gap-2 mb-3">
        <button class="btn btn-primary" @onclick="TestSuccess" disabled="@_testing">Test Success</button>
        <button class="btn btn-secondary" @onclick="TestFailure" disabled="@_testing">Test Failure</button>
    </div>
</div>

@code {
    private IJSObjectReference? _module;
    private bool _testing;
    private string? _statusMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Logger.LogInformation("Loading test module...");
                _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/test-acs-ui.js");
                Logger.LogInformation("Test module loaded successfully");
                _statusMessage = "‚úÖ Test module loaded - ready to test JSON handling";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to load test module");
                _statusMessage = $"‚ùå Failed to load module: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task TestSuccess()
    {
        if (_module == null) return;
        
        try
        {
            _testing = true;
            _statusMessage = "üîç Testing successful JSON response...";
            StateHasChanged();
            
            var result = await _module.InvokeAsync<System.Text.Json.JsonElement>("testAcsUI.testCheckLibraries");
            
            var success = result.TryGetProperty("success", out var successProp) ? successProp.GetBoolean() : false;
            var message = result.TryGetProperty("message", out var messageProp) ? messageProp.GetString() ?? "" : "No message provided";
            
            _statusMessage = $"‚úÖ Success test passed! Success: {success}, Message: {message}";
            Logger.LogInformation("Success test completed - Success: {Success}, Message: {Message}", success, message);
        }
        catch (Exception ex)
        {
            _statusMessage = $"‚ùå Error in success test: {ex.Message}";
            Logger.LogError(ex, "Failed success test");
        }
        finally
        {
            _testing = false;
            StateHasChanged();
        }
    }

    private async Task TestFailure()
    {
        if (_module == null) return;
        
        try
        {
            _testing = true;
            _statusMessage = "üîç Testing failure JSON response...";
            StateHasChanged();
            
            var result = await _module.InvokeAsync<System.Text.Json.JsonElement>("testAcsUI.testCheckLibrariesFail");
            
            var success = result.TryGetProperty("success", out var successProp) ? successProp.GetBoolean() : false;
            var message = result.TryGetProperty("message", out var messageProp) ? messageProp.GetString() ?? "" : "No message provided";
            
            _statusMessage = $"‚úÖ Failure test passed! Success: {success}, Message: {message}";
            Logger.LogInformation("Failure test completed - Success: {Success}, Message: {Message}", success, message);
        }
        catch (Exception ex)
        {
            _statusMessage = $"‚ùå Error in failure test: {ex.Message}";
            Logger.LogError(ex, "Failed failure test");
        }
        finally
        {
            _testing = false;
            StateHasChanged();
        }
    }
}

@code {
    public class TestJsonPage
    {
        // Empty class just for the logger generic type
    }
}